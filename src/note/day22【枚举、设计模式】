设计模式
    1. 装饰设计模式(Decorate)
        装饰模式指的是在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。
    2. 单例设计模式(Singleton)
        1、创建类型的一种常用的软件设计模式  （也有可能一个线程中属于单例，如：仅线程上下文内使用同一个实例）
        2、单例模式的方法创建的类在当前进程中只有一个实例
        3、主要作用是保证在Java应用程序中,一个类Class只有一个实例存在
        4、节省内存
        5、饿汉式和懒汉式的区别
            饿汉式一上来就new对象,把对象加载进方法区
            懒汉式是先不new对象,等到有人使用时再判断是否为null,如果为null那么就new一个实例返回 懒汉式具有线程隐患
    3. 模板设计模式(Template)
        1、一个算法的骨架，将具体的算法延迟到子类中来实现
        2、优点：在定义算法骨架的同时，可以很灵活的实现具体的算法，满足用户灵活多变的需求
        2、缺点：如果算法骨架有修改的话，则需要修改抽象类
    4. 工厂设计模式(Factory)

